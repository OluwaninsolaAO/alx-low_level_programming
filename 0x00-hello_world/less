
========== -c ==========
Usage: /usr/local/bin/betty-style [OPTION]... [FILE]...
Version: 0.32

Options:
  -q, --quiet                Quiet mode
  --tree                     Run with a kernel tree.
  --no-signoff               Do not check for 'Signed-off-by' line
  --patch                    Treat FILE as patchfile (default)
  --emacs                    Emacs compile window format
  --no-terse                 Disable one line per report.
  --showfile                 Emit diffed file position, not input file position
  -g, --git                  Treat FILE as a single commit or git revision range
                             Single git commit with:
                               <rev>
                               <rev>^
                               <rev>~n
                             Multiple git commits with:
                               <rev1>..<rev2>
                               <rev1>...<rev2>
                               <rev>-<count>
                             Git merges are ignored
  --no-file                  Don't treat FILE as regular source file.
  --subjective, --strict     Enable more subjective tests
  --list-types               List the possible message types
  --types TYPE(,TYPE2...)    Show only these comma separated message types
  --ignore TYPE(,TYPE2...)   Ignore various comma separated message types
  --show-types               Show the specific message type in the output
  --min-conf-desc-length=n   Set the min description length, if shorter, warn
  --root=PATH                PATH to the kernel tree root
  --no-summary               Suppress the per-file summary
  --mailback                 Only produce a report in case of warnings/errors
  --summary-file             Include the filename in summary
  --debug KEY=[0|1]          Turn on/off debugging of KEY, where KEY is one of
                             'values', 'possible', 'type', and 'attr' (default
                             is all off)
  --test-only=WORD           Report only warnings/errors containing WORD
                             literally
  --fix                      EXPERIMENTAL - may create horrible results
                             If correctable single-line errors exist, create
                             "<inputfile>.EXPERIMENTAL-checkpatch-fixes"
                             with potential errors corrected to the preferred
                             checkpatch style
  --fix-inplace              EXPERIMENTAL - may create horrible results
                             Is the same as --fix, but overwrites the input
                             file.  It's your fault if there's no backup or git
  --ignore-perl-version      Override checking of perl version.  expect
                             runtime errors.
  --codespell                Use the codespell dictionary for spelling/typos
                             (default:/usr/share/codespell/dictionary.txt)
  --codespellfile            Use this codespell dictionary
  --color                    Use colors when output is STDOUT (default: on)

  --max-line-length=n        Set the maximum length of a line (default: 80)
  --max-func-length=n        Set the maximum length of a function (default: 40)
  --max-funcs=n              Set the maximum declared functions per source file
                             (default: 5)
                             Set it to -1 for infinite
  --no-safe-guard            Don't check for header files protection
  --allow-global-variables   Allow global variable definition
  -r, --recursive            Run for every C source file (.c and .h) recursively

  -h, --help, --version      Display this help and exit

When FILE is - read standard input.

========== main.c ==========
main
